options {
    STATIC = false;
}
PARSER_BEGIN(JustParser)
package root;

import root.parser.*;
public class JustParser {


  private static JustParser instance;
  private static SymbolTable symbolTable = new SymbolTable();

  public JustParser() {
      symbolTable = new SymbolTable();
   } /** root.Main entry point. */

  public static void main(String args[]) throws ParseException {
    //JustParser.readInput(System.in);
  }

  public static void readInput(String input) throws ParseException {
      instance = new JustParser(new java.io.StringReader(input));
      instance.parse();
  }

  public static void resetParser() {
      if (instance == null) return;
      instance.ReInit(instance.token_source);
      symbolTable = new SymbolTable();
  }
}



PARSER_END(JustParser)

SKIP : {
    " " |
    "\t" |
    "\n" |
    "\r"
}


TOKEN : {
    <PROGRAM: "program">
    | <WHILE: "while">
    | <IF: "if">
    | <ELSE: "else">
    | <VOID: "void">
    | <RETURN: "return">
    | <L_PARENTHESES : "(">
    | <R_PARENTHESES : ")">
    | <L_SQUARE_BRACKETS : "[">
    | <R_SQUARE_BRACKETS : "]">
    | <L_CURLY_BRACKETS : "{">
    | <R_CURLY_BRACKETS : "}">
    | <SEMICOLON : ";">
    | <ASSIGN: "=">
    | <#LETTER: ["a"-"z", "A"-"Z"]>
    | <#DIGIT: ["0"-"9"]>
    | <NUMBER: (<DIGIT>)+("." (<DIGIT>)+)?>
    | <PRIMITIVES: "boolean" | "int">
    | <BOOLS: "true" | "false">
    | <IDENTIFIER: <LETTER>(<LETTER>|<DIGIT>)*>
    | <CONDITIONAL_OPERATIONS: "&&" | "||">
    | <COMMA: ",">
}


void parse() : {}
{
    ProgramBlock() <EOF>
}

void ProgramBlock() : {}
{
    <PROGRAM><IDENTIFIER>
    {symbolTable.enterScope("PROGRAM");} <L_CURLY_BRACKETS>
        (topLevelProgramDeclarations())*
    <R_CURLY_BRACKETS>
    {symbolTable.leaveScope();}
}

void topLevelProgramDeclarations() : {} {
    LOOKAHEAD(3) Function()
    | LOOKAHEAD(3) expr()
}

void functionLevleDeclarations() : {}
{
    expr()
    | controlFlow()
}
void condExpr() : {} {
    (<BOOLS> | <IDENTIFIER>) (<CONDITIONAL_OPERATIONS> (<BOOLS> | <IDENTIFIER> ))*
}

void ifThenElse() :
{ Token token; }
{
    token = <IF> <L_PARENTHESES> condExpr() <R_PARENTHESES> {symbolTable.enterScope("IF_THEN");} <L_CURLY_BRACKETS>
        (functionLevleDeclarations())*
    <R_CURLY_BRACKETS> {symbolTable.leaveScope();}
    [
        <ELSE> {symbolTable.enterScope("IF_ELSE");} <L_CURLY_BRACKETS>
            (functionLevleDeclarations())*
        <R_CURLY_BRACKETS>{symbolTable.leaveScope();}
    ]
}

void whileLoop() :
{}
{
    <WHILE> <L_PARENTHESES> condExpr() <R_PARENTHESES> {symbolTable.enterScope("WHILE");} <L_CURLY_BRACKETS>
         (functionLevleDeclarations())*
    <R_CURLY_BRACKETS> {symbolTable.leaveScope();}
}

void controlFlow() : {}
{
    ifThenElse()
    | whileLoop()
}

void expr() : {}
{
    LOOKAHEAD(3) Assignment()
        | LOOKAHEAD(3) VariableDeclaration()
        | LOOKAHEAD(3) DeclarationWithAssignment()
}

void param() : {}
{
    <PRIMITIVES> <IDENTIFIER>
}

void params() : {}
{
    param() (<COMMA> param())*
}

Symbol FunctionHeader() : { Token funcRType, funcName; } {
    (funcRType = <VOID> | funcRType = <PRIMITIVES>) funcName = <IDENTIFIER>
    { return new Symbol(true, 0, 0); }
}

void Function() :
{ Symbol symbol; }
{
     symbol = FunctionHeader() {symbolTable.insert(symbol); symbolTable.enterScope("FUNC");}
      <L_PARENTHESES> [params()] <R_PARENTHESES> <L_CURLY_BRACKETS>
            (functionLevleDeclarations())*
            [<RETURN> (<NUMBER> | condExpr())? <SEMICOLON>]
      <R_CURLY_BRACKETS>
     {
        symbolTable.leaveScope();
     }
}

void Assignment() : {} {
    <IDENTIFIER><ASSIGN>(<NUMBER>|<BOOLS>)<SEMICOLON>
}

void VariableDeclaration() : {}
{
    <PRIMITIVES><IDENTIFIER> <SEMICOLON>
}

void DeclarationWithAssignment() : {}
{
    <PRIMITIVES><IDENTIFIER> <ASSIGN> (<NUMBER>|<BOOLS>) <SEMICOLON>
}
